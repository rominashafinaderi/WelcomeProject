import 'package:flutter/material.dart' as m;
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class TextFormField2 extends m.TextFormField {
  final TextEditingController? controller;

  TextFormField2(
      {super.key,
        this.controller,
        String? initialValue,
        FocusNode? focusNode,
        InputDecoration? decoration = const InputDecoration(),
        TextInputType? keyboardType,
        TextCapitalization textCapitalization = TextCapitalization.none,
        TextInputAction? textInputAction,
        TextStyle? style,
        StrutStyle? strutStyle,
        TextDirection? textDirection,
        TextAlign textAlign = TextAlign.start,
        TextAlignVertical? textAlignVertical,
        bool autofocus = false,
        bool readOnly = false,
        ToolbarOptions? toolbarOptions,
        bool? showCursor,
        String obscuringCharacter = 'â€¢',
        bool obscureText = false,
        bool autocorrect = true,
        SmartDashesType? smartDashesType,
        SmartQuotesType? smartQuotesType,
        bool enableSuggestions = true,
        MaxLengthEnforcement? maxLengthEnforcement,
        int? maxLines = 1,
        int? minLines,
        bool expands = false,
        int? maxLength,
        ValueChanged<String>? onChanged,
        GestureTapCallback? onTap,
        VoidCallback? onEditingComplete,
        ValueChanged<String>? onFieldSubmitted,
        super.onSaved,
        super.validator,
        List<TextInputFormatter>? inputFormatters,
        bool? enabled,
        double cursorWidth = 2.0,
        double? cursorHeight,
        Radius? cursorRadius,
        Color? cursorColor,
        Brightness? keyboardAppearance,
        EdgeInsets scrollPadding = const EdgeInsets.all(20.0),
        bool? enableInteractiveSelection,
        TextSelectionControls? selectionControls,
        InputCounterWidgetBuilder? buildCounter,
        ScrollPhysics? scrollPhysics,
        Iterable<String>? autofillHints,
        AutovalidateMode? autovalidateMode,
        ScrollController? scrollController,
        super.restorationId,
        bool enableIMEPersonalizedLearning = true,
        MouseCursor? mouseCursor})
      : super(
    controller: controller,
    initialValue: initialValue,
    focusNode: focusNode,
    decoration: decoration,
    keyboardType: keyboardType,
    textCapitalization: textCapitalization,
    textInputAction: textInputAction,
    style: style,
    strutStyle: strutStyle,
    textDirection: textDirection,
    textAlign: textAlign,
    textAlignVertical: textAlignVertical,
    autofocus: autofocus,
    readOnly: readOnly,
    toolbarOptions: toolbarOptions,
    showCursor: showCursor,
    obscuringCharacter: obscuringCharacter,
    obscureText: obscureText,
    autocorrect: autocorrect,
    smartDashesType: smartDashesType,
    smartQuotesType: smartQuotesType,
    enableSuggestions: enableSuggestions,
    maxLengthEnforcement: maxLengthEnforcement,
    maxLines: maxLines,
    minLines: minLines,
    expands: expands,
    maxLength: maxLength,
    onChanged: onChanged,
    onTap: () {
      if (controller != null) {
        var txtSelection = TextSelection.fromPosition(
            TextPosition(offset: controller.text.length - 1));

        if (controller.selection == txtSelection) {
          controller.selection = TextSelection.fromPosition(
              TextPosition(offset: controller.text.length));
        }
      }
      if (onTap != null) onTap();
    },
    onEditingComplete: onEditingComplete,
    onFieldSubmitted: onFieldSubmitted,
    inputFormatters: inputFormatters,
    enabled: enabled,
    cursorWidth: cursorWidth,
    cursorHeight: cursorHeight,
    cursorRadius: cursorRadius,
    cursorColor: cursorColor,
    keyboardAppearance: keyboardAppearance,
    scrollPadding: scrollPadding,
    enableInteractiveSelection: enableInteractiveSelection,
    selectionControls: selectionControls,
    buildCounter: buildCounter,
    scrollPhysics: scrollPhysics,
    autofillHints: autofillHints,
    autovalidateMode: autovalidateMode,
    scrollController: scrollController,
    enableIMEPersonalizedLearning: enableIMEPersonalizedLearning,
    mouseCursor: mouseCursor,
  );
}
